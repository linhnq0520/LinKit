using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace LinKit.Grpc.Generator;

[Generator]
public class RootGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var grpcClientServices = GrpcClientGeneratorPart.GetServices(context);
        var grpcServices = GrpcGeneratorPart.GetServices(context);

        GrpcClientGeneratorPart.Initialize(context);
        GrpcGeneratorPart.Initialize(context);

        var allServices =grpcClientServices
            .Combine(grpcServices)
            .Select(
                (combined, _) =>
                    new AllServicesInfo
                    {
                        GrpcClientServices = combined.Left,
                        GrpcServices = combined.Right,
                    }
            );

        context.RegisterSourceOutput(
            allServices,
            (spc, services) =>
            {
                // --- gRPC Client ---
                if (services.GrpcClientServices.Any())
                {
                    var src = GeneratePartialDI(
                        services.GrpcClientServices.Select(s => s.RegistrationCode),
                        "LinKit.Core",
                        "AddLinKitGrpcClient",
                        "gRPC Client Mediator"
                    );
                    spc.AddSource($"GrpcClient.DependencyInjection.g.cs", SourceText.From(src, Encoding.UTF8));
                }

                // --- gRPC Server ---
                if (services.GrpcServices.Any())
                {
                    var src = GeneratePartialDI(
                        services.GrpcServices.Select(s => s.RegistrationCode),
                        "LinKit.Core",
                        "AddLinKitGrpcServer",
                        "gRPC Server Services (Generated Implementations)"
                    );
                    spc.AddSource($"GrpcServer.DependencyInjection.g.cs", SourceText.From(src, Encoding.UTF8));
                }
            }
        );
    }

    private static string GeneratePartialDI(IEnumerable<string> registrations, string @namespace, string methodName, string comment)
    {
        var sb = new StringBuilder();
        sb.AppendLine(
            @"// <auto-generated/> by LinKit.Generator
#nullable enable
using Microsoft.Extensions.DependencyInjection;
using LinKit.Core.Abstractions;"
        );

        sb.AppendLine($"namespace {@namespace}");
        sb.AppendLine(@"{
    public static partial class ServicesExtensions
    {");
        sb.AppendLine($"        public static IServiceCollection {methodName}(this IServiceCollection services)");
        sb.AppendLine("        {");
        sb.AppendLine($"            // --- {comment} ---");

        foreach (var reg in registrations.Distinct())
        {
            sb.AppendLine($"            {reg}");
        }

        sb.AppendLine(
    @"            return services;
        }
    }
}"
        );
        return sb.ToString();
    }
}

internal record AllServicesInfo
{
    public IReadOnlyList<GrpcClientServiceInfo> GrpcClientServices { get; init; } = new List<GrpcClientServiceInfo>();
    public IReadOnlyList<GrpcServiceInfo> GrpcServices { get; init; } = new List<GrpcServiceInfo>();
}

internal record GrpcClientServiceInfo(string RegistrationCode);
internal record GrpcServiceInfo(string RegistrationCode);