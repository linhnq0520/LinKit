using System.Collections.Generic;
using System.Linq;
using System.Text;
using LinKit.Core.Abstractions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace LinKit.Generator.Generators;

[Generator]
public class RootGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // Lấy service info từ các part
        var cqrsServices = CqrsGeneratorPart.GetServices(context);
        var grpcClientServices = GrpcClientGeneratorPart.GetServices(context);
        var diServices = DependencyInjectionGeneratorPart.GetServices(context);
        var grpcServices = GrpcGeneratorPart.GetServices(context);

        // Generate non-DI files từ các part
        CqrsGeneratorPart.GenerateNonDIFiles(context);
        GrpcClientGeneratorPart.GenerateNonDIFiles(context);
        GrpcGeneratorPart.Initialize(context);
        EndpointsGeneratorPart.Initialize(context);

        // Combine tất cả service info lại
        var allServices = cqrsServices
            .Combine(grpcClientServices)
            .Combine(diServices)
            .Combine(grpcServices)
            .Select(
                (combined, _) =>
                    new AllServicesInfo
                    {
                        CqrsServices = combined.Left.Left.Left,
                        GrpcClientServices = combined.Left.Left.Right,
                        DIServices = combined.Left.Right,
                        GrpcServices = combined.Right,
                    }
            );

        // Generate file DI tổng hợp
        context.RegisterSourceOutput(
            allServices,
            (spc, services) =>
            {
                if (IsEmpty(services))
                    return;

                var source = GenerateCombinedDI(services);
                spc.AddSource(
                    "AllServices.DependencyInjection.g.cs",
                    SourceText.From(source, Encoding.UTF8)
                );
            }
        );
    }

    private static bool IsEmpty(AllServicesInfo services)
    {
        return !services.CqrsServices.Any()
            && !services.GrpcClientServices.Any()
            && !services.DIServices.Any()
            && !services.GrpcServices.Any();
    }

    private static string GenerateCombinedDI(AllServicesInfo services)
    {
        var sb = new StringBuilder();
        sb.AppendLine(
            @"// <auto-generated/> by LinKit.Generator
#nullable enable
using Microsoft.Extensions.DependencyInjection;
using LinKit.Core.Abstractions;

namespace LinKit.Core
{
    public static class AllGeneratedServicesExtensions
    {
        public static IServiceCollection AddAllGeneratedServices(this IServiceCollection services)
        {"
        );

        // Add CQRS services
        if (services.CqrsServices.Any())
        {
            sb.AppendLine("            // CQRS Services");
            foreach (var service in services.CqrsServices)
            {
                sb.AppendLine($"            {service.RegistrationCode}");
            }
            sb.AppendLine();
        }

        // Add gRPC Client services
        if (services.GrpcClientServices.Any())
        {
            sb.AppendLine("            // gRPC Client Services");
            foreach (var service in services.GrpcClientServices)
            {
                sb.AppendLine($"            {service.RegistrationCode}");
            }
            sb.AppendLine();
        }

        // Add gRPC Server services
        if (services.GrpcServices.Any())
        {
            sb.AppendLine("            // gRPC Server Services");
            foreach (var service in services.GrpcServices)
            {
                sb.AppendLine($"            {service.RegistrationCode}");
            }
            sb.AppendLine();
        }

        // Add DI services
        if (services.DIServices.Any())
        {
            sb.AppendLine("            // Registered Services");
            foreach (var service in services.DIServices)
            {
                var lifetime = ((Lifetime)service.Lifetime) switch
                {
                    Lifetime.Scoped => "AddScoped",
                    Lifetime.Singleton => "AddSingleton",
                    _ => "AddTransient",
                };
                sb.AppendLine(
                    $"            services.{lifetime}<{service.ServiceType}, {service.ImplementationType}>();"
                );
            }
        }

        sb.AppendLine(
            @"
            return services;
        }
    }
}"
        );
        return sb.ToString();
    }
}

// Data structures for centralized approach
internal record AllServicesInfo
{
    public IReadOnlyList<CqrsServiceInfo> CqrsServices { get; init; } = new List<CqrsServiceInfo>();
    public IReadOnlyList<GrpcClientServiceInfo> GrpcClientServices { get; init; } =
        new List<GrpcClientServiceInfo>();
    public IReadOnlyList<ServiceInfo> DIServices { get; init; } = new List<ServiceInfo>();
    public IReadOnlyList<GrpcServiceInfo> GrpcServices { get; init; } = new List<GrpcServiceInfo>();
}

internal record CqrsServiceInfo(string RegistrationCode);

internal record GrpcClientServiceInfo(string RegistrationCode);
