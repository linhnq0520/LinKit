using LinKit.Core.Abstractions;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace LinKit.Generator.Generators;

internal static class SourceGenerationHelper
{
    public static string GenerateMediatorExtensions(IReadOnlyList<HandlerInfo> handlers, IReadOnlyList<BehaviorInfo> availableBehaviors)
    {
        var sb = new StringBuilder();
        sb.AppendLine(@"// <auto-generated/> by LinKit.Generator
#nullable enable
using LinKit.Core.Cqrs;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Threading;
using System.Threading.Tasks;

namespace LinKit.Core.Cqrs
{
    public static class MediatorGeneratedExtensions
    {");

        foreach (var handler in handlers)
        {
            var isQuery = handler.HandlerInterface.Contains("IQueryHandler");
            var methodName = isQuery ? "QueryAsync" : "SendAsync";
            var requestParamName = isQuery ? "query" : "command";

            if (handler.ResponseType == "System.ValueTuple")
            {
                sb.Append($@"
        public static Task {methodName}(this IMediator mediator, {handler.RequestType} {requestParamName}, CancellationToken ct = default)
        {{");
            }
            else
            {
                sb.Append($@"
        public static Task<{handler.ResponseType}> {methodName}(this IMediator mediator, {handler.RequestType} {requestParamName}, CancellationToken ct = default)
        {{");
            }

            sb.Append($@"
            RequestHandlerDelegate<{handler.ResponseType}> next = () => 
                mediator.Services.GetRequiredService<{handler.HandlerInterface}>()
                                 .HandleAsync({requestParamName}, ct);
");
            var applicableBehaviors = availableBehaviors
                .Where(b => b.TargetInterface is null || handler.MarkerInterfaces.Contains(b.TargetInterface))
                .OrderBy(b => b.Order)
                .ToList();

            foreach (var behavior in applicableBehaviors.AsEnumerable().Reverse())
            {
                sb.AppendLine("            {");
                var closedBehaviorType = $"{behavior.UnboundBehaviorType}<{handler.RequestType}, {handler.ResponseType}>";
                sb.AppendLine("                var capturedNext = next;");
                sb.AppendLine($@"                next = () => mediator.Services.GetRequiredService<{closedBehaviorType}>().HandleAsync({requestParamName}, capturedNext, ct);");
                sb.AppendLine("            }");
            }

            sb.Append(@"
            return next();
        }
");
        }

        sb.AppendLine(@"    }
}");
        return sb.ToString();
    }
    public static string GenerateCqrsDI(IReadOnlyList<HandlerInfo> handlers, IReadOnlyList<BehaviorInfo> availableBehaviors)
    {
        var sb = new StringBuilder();
        sb.AppendLine(@"// <auto-generated/> by LinKit.Generator
#nullable enable
using Microsoft.Extensions.DependencyInjection;
using LinKit.Core.Cqrs;

namespace LinKit.Core
{
    public static class CqrsExtensions
    {
        public static IServiceCollection AddLinKitCqrs(this IServiceCollection services)
        {
            services.AddSingleton<IMediator, Mediator>();
");
        foreach (var handler in handlers)
        {
            sb.AppendLine($"            services.AddTransient<{handler.HandlerInterface}, {handler.HandlerType}>();");
        }
        if (availableBehaviors.Any())
        {
            var registeredBehaviors = new HashSet<string>();
            foreach (var behavior in availableBehaviors)
            {
                if (registeredBehaviors.Add(behavior.UnboundBehaviorType))
                {
                    sb.Append($"\n            services.AddTransient(typeof({behavior.UnboundBehaviorType}<,>));");
                }
            }
        }
        sb.AppendLine(@"
            return services;
        }
    }
}");
        return sb.ToString();
    }

    public record ServiceInfo(string ServiceType, string ImplementationType, int Lifetime);

    public static string GenerateServicesDI(IReadOnlyList<ServiceInfo> services)
    {
        var sb = new StringBuilder();
        sb.AppendLine(@"// <auto-generated/> by LinKit.Generator
#nullable enable
using Microsoft.Extensions.DependencyInjection;
using LinKit.Core.Abstractions;

namespace LinKit.Core
{
    public static class ServicesExtensions
    {
        public static IServiceCollection AddGeneratedServices(this IServiceCollection services)
        {");

        foreach (var service in services)
        {
            var lifetimeMethod = ((Lifetime)service.Lifetime) switch
            {
                Lifetime.Scoped => "AddScoped",
                Lifetime.Singleton => "AddSingleton",
                _ => "AddTransient"
            };
            sb.AppendLine($"            services.{lifetimeMethod}<{service.ServiceType}, {service.ImplementationType}>();");
        }

        sb.AppendLine(@"
            return services;
        }
    }
}
");
        return sb.ToString();
    }
}